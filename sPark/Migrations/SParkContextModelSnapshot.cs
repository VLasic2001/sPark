// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sPark;

#nullable disable

namespace sPark.Migrations
{
    [DbContext(typeof(SParkContext))]
    partial class SParkContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("sPark.Models.Favorite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ParkingId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ParkingId");

                    b.HasIndex("ParkingId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("sPark.Models.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Neighbourhood")
                        .HasColumnType("int");

                    b.Property<string>("ParkingName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("sPark.Models.ParkingSpotType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAvailableSpots")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTotalSpots")
                        .HasColumnType("int");

                    b.Property<int>("ParkingId")
                        .HasColumnType("int");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("ParkingSpotTypes");
                });

            modelBuilder.Entity("sPark.Models.Reservation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ParkingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TimeOfExit")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.HasKey("UserId", "ParkingId");

                    b.HasIndex("ParkingId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("sPark.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("sPark.Models.Favorite", b =>
                {
                    b.HasOne("sPark.Models.Parking", "Parking")
                        .WithMany("Favorites")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sPark.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sPark.Models.ParkingSpotType", b =>
                {
                    b.HasOne("sPark.Models.Parking", "Parking")
                        .WithMany("ParkingSpotTypes")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("sPark.Models.Reservation", b =>
                {
                    b.HasOne("sPark.Models.Parking", "Parking")
                        .WithMany("Reservations")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sPark.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sPark.Models.Parking", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("ParkingSpotTypes");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("sPark.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
